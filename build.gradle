import com.bmuschko.gradle.cargo.convention.Deployable
import com.bmuschko.gradle.cargo.tasks.remote.CargoDeployRemote
import com.bmuschko.gradle.cargo.tasks.remote.CargoUndeployRemote

buildscript {
    ext.artifactId = 'partypay-api'
    ext.deploy_version = '0.0.1'
    ext.undeploy_version = '0.0.0'
    ext.p_group = 'br.com.fairie.partypay'
    ext.archive_extension = 'war'
    ext.archive_file_name = "${artifactId}##${deploy_version}.${archive_extension}"

    ext.kotlin_version = '1.5.21'
    ext.jacoco_palantir_version = '0.4.0'
    ext.cargo_plugin_version = '2.6.1'

    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.palantir:jacoco-coverage:$jacoco_palantir_version"
        classpath "com.bmuschko:gradle-cargo-plugin:$cargo_plugin_version"
        classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlin_version"
    }
}

group = ext.p_group
version = ext.deploy_version
description = "Projeto de integração"

apply plugin: 'jacoco'
apply plugin: 'com.bmuschko.cargo-base'
apply plugin: "kotlin-jpa"

jacoco {
    toolVersion = "0.8.3"
}

dependencies {
    def cargoVersion = '1.9.6'
    cargo "org.codehaus.cargo:cargo-core-uberjar:$cargoVersion",
            "org.codehaus.cargo:cargo-licensed-dtds:$cargoVersion",
            "org.codehaus.cargo:cargo-ant:$cargoVersion"
}

allprojects {
    repositories {
        mavenCentral()
    }
}

subprojects {
    ext {
        versions = [
                junit               : "4.13.1",
                jupiter             : "5.2.0",
                spring              : "2.5.3",
                spring_core         : "5.3.9",
                spring_security_core: "5.5.1",
                mysql               : "5.1.46",
                jackson_kotlin      : '2.9.7',
                swagger             : '2.9.2',
                mockk               : '1.9',
                h2                  : '1.4.200',
                codecentric         : '2.4.3',
                jjwt                : '0.9.1'
        ]

        libs = [
                unit_test      : [
                        "junit:junit:${versions.junit}",
                        "org.junit.jupiter:junit-jupiter-api:${versions.jupiter}",
                        "org.junit.jupiter:junit-jupiter-params:${versions.jupiter}",
                        "org.junit.jupiter:junit-jupiter-engine:${versions.jupiter}",
                        "io.mockk:mockk:${versions.mockk}",
                ],
                spring_test    : [
                        "org.springframework.boot:spring-boot-starter-test:${versions.spring}",
                ],
                spring_web     : [
                        "org.springframework.boot:spring-boot-starter-web:${versions.spring}",
                        "org.springframework.boot:spring-boot-starter-validation:${versions.spring}",
                ],
                spring_provider: [
                        "org.springframework:spring-core:${versions.spring_core}",
                        "org.springframework.security:spring-security-core:${versions.spring_security_core}",
                        "org.springframework.boot:spring-boot-starter-jdbc:${versions.spring}",
                        "org.springframework.boot:spring-boot-starter-data-jpa:${versions.spring}",
                ],
                spring_config  : [
                        "com.fasterxml.jackson.module:jackson-module-kotlin:${versions.jackson_kotlin}",
                        "org.springframework.boot:spring-boot-configuration-processor:${versions.spring}",
                        "org.springframework.boot:spring-boot-starter-security:${versions.spring}",
                        "de.codecentric:spring-boot-admin-starter-client:${versions.codecentric}",
                        "io.jsonwebtoken:jjwt:${versions.jjwt}"
                ],
                swagger        : [
                        "io.springfox:springfox-swagger2:${versions.swagger}",
                        "io.springfox:springfox-swagger2:${versions.swagger}",
                        "io.springfox:springfox-swagger-ui:${versions.swagger}"
                ],
                cacheable      : [
                        "org.springframework.boot:spring-boot-starter-cache:${versions.spring}",
                        "com.github.ben-manes.caffeine:caffeine:2.8.0",
                        "com.github.ben-manes.caffeine:guava:2.8.0",
                        "com.github.ben-manes.caffeine:jcache:2.8.0",
                ],
                database       : [
                        "mysql:mysql-connector-java:${versions.mysql}",
                        "com.h2database:h2:${versions.h2}"
                ]
        ]
    }
}

configure(allprojects - project(":application")) {
    apply plugin: "java"
    apply plugin: "kotlin"
    apply plugin: "org.jetbrains.kotlin.jvm"
    apply plugin: "kotlin-jpa"


    jacoco {
        toolVersion = "0.8.3"
    }
    compileKotlin {
        kotlinOptions.jvmTarget = JavaVersion.VERSION_1_8
        kotlinOptions.javaParameters = true
    }

    compileTestKotlin {
        kotlinOptions.jvmTarget = JavaVersion.VERSION_1_8
        kotlinOptions.javaParameters = true
    }

    test {
        useJUnitPlatform() {
            excludeTags("integration")
        }
    }

    task integrationTest(type: Test) {
        group = "verification"
        useJUnitPlatform() {
            includeTags("integration")
        }
        check.dependsOn it
        shouldRunAfter test
    }
}

class RemoteContainer {
    String name
    String hostname
    Integer port
    String username
    String password
}

def remoteContainers = [
        new RemoteContainer(
                name: 'teste',
                hostname: 'teste',
                port: 8080,
                username: 'teste',
                password: 'teste'),
]

remoteContainers.each { config ->
    task "undeployRemote${config.name.capitalize()}"(type: CargoUndeployRemote) {
        description = "Undeploys WAR from remote Tomcat '${config.name}'."
        containerId = 'tomcat7x'
        hostname = config.hostname
        port = config.port
        username = config.username
        password = config.password
        deployables = [new Deployable(
                files: files("${rootProject.buildDir}/${rootProject.ext.archive_file_name}"),
                context: "${rootProject.ext.artifactId}##${rootProject.ext.undeploy_version}")]
    }
}

remoteContainers.each { config ->
    task "deployRemote${config.name.capitalize()}"(type: CargoDeployRemote) {
        description = "Deploys WAR to remote Tomcat '${config.name}'."
        containerId = 'tomcat7x'
        hostname = config.hostname
        port = config.port
        username = config.username
        password = config.password
        deployables = [new Deployable(
                files: files("${rootProject.buildDir}/${rootProject.ext.archive_file_name}"),
                context: "${rootProject.ext.artifactId}##${rootProject.ext.deploy_version}")]
    }
}

task undeployFromAllRemoteTomcats {
    dependsOn remoteContainers.collect { "undeployRemote${it.name.capitalize()}" }
    description = 'Uneploys from all remote Tomcat containers.'
    group = 'deployment'
}

task deployToAllRemoteTomcats {
    dependsOn remoteContainers.collect { "deployRemote${it.name.capitalize()}" }
    description = 'Deploys to all remote Tomcat containers.'
    group = 'deployment'
}

wrapper {
    gradleVersion = '5.5.1'
}